# # Inspired by: https://blog.petrzemek.net/2016/02/11/my-tmux-configuration/
# #   https://github.com/s3rvac/dotfiles/blob/master/tmux/.tmux.conf
#
#
# Rebind the prefix from C-b to C-Space.
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix
#
# #------------------------------------------------------------------------------
# # Settings.
# #------------------------------------------------------------------------------
#
# # https://superuser.com/questions/253786/how-can-i-make-tmux-use-my-default-shell
set-option -g default-shell /bin/zsh
#
# # Support 256 colors in the terminal emulator.
set -g default-terminal "screen-256color"
set-option -sa terminal-features ',screen-256color:RGB'

# # Disable the delay between an escape key press and subsequent characters.
# # This increases Vim responsiveness.
set -sg escape-time 0
#
# # Set the base index for windows to 1 instead of 0.
set -g base-index 1
#
# # Set the base index for panes to 1 instead of 0.
setw -g pane-base-index 1
#
# # Scrollback limit.
set -g history-limit 10000
#
# # Disable mouse in tmux. This makes tmux pass control directly to the used
# # terminal emulator, so I can copy&paste as if I am not using tmux.
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) < 2.1" | bc) -eq 1 ]' \
    "setw -g mode-mouse off" \
        "setw -g mouse off"
#
# # Monitor window activity. Windows with activity are then highlighted in the
# # status line.
setw -g monitor-activity on
#
# # Prevent tmux from displaying "Activity in window X" messages.
set -g visual-activity off
#
# # Automatically re-number windows after one of them is closed.
set -g renumber-windows on
#
# # src: https://evertpot.com/osx-tmux-vim-copy-paste-clipboard/
# # Copy-paste integration
# set-option -g default-command "reattach-to-user-namespace -l zsh"
#
# # Use vim keybindings in copy mode
setw -g mode-keys vi

bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
# # Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# #
# # Update default binding of `Enter` to also use copy-pipe
# # unbind -t vi-copy Enter
# # bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
# #
#
# # Bind ']' to use pbpaste
# bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"
#
# #------------------------------------------------------------------------------
# # Key Bindings.
# #------------------------------------------------------------------------------
#
# Smart pane switching with awareness of Vim splits. Now, I can use Ctrl+hjkl
# in both Vim and Tmux (without using the prefix). Based on
# http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits.
# Note: I do not use https://github.com/christoomey/vim-tmux-navigator because
#       it does not work when vim is run over ssh.
# Note: The "... || true" part is there to prevent annoying messages when there
#       is no pane to switch into.
# Note: In the grep regular expression, '^vim$' matches Vim run from terminal,
#       and '- VIM$' matches Vim run from Midnight Commander.
bind -n C-h run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\)' && tmux send-keys C-h) || (tmux select-pane -L || true)"
bind -n C-j run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\)' && tmux send-keys C-j) || (tmux select-pane -D || true)"
bind -n C-k run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\)' && tmux send-keys C-k) || (tmux select-pane -U || true)"
bind -n C-l run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\)' && tmux send-keys C-l) || (tmux select-pane -R || true)"
# Since tmux 2.6, the following two bindings have to be also set from the copy
# mode. Otherwise, they will not work in the copy mode.
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.6" | bc) -eq 1 ]' \
        "bind -T copy-mode-vi -n C-h run \"(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\)' && tmux send-keys C-h) || (tmux select-pane -L || true)\"" ""
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.6" | bc) -eq 1 ]' \
        "bind -T copy-mode-vi -n C-j run \"(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\)' && tmux send-keys C-j) || (tmux select-pane -D || true)\"" ""

# Occasionally, it may happen that the above smart-pane-switching keys do not
# work. In such a case, the following bindings allow me to force pane switching
# by using Ctrl+hjkl with prefix.
bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R

# Pane resizing.
bind -r M-h resize-pane -L 5
bind -r M-j resize-pane -D 5
bind -r M-k resize-pane -U 5
bind -r M-l resize-pane -R 5

# Pane splitting.
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Movement of windows.
bind -r < swap-window -t -1
bind -r > swap-window -t +1

# Clear all panes in the current window.
# Note: The spaces before 'for' and 'clear' prevent the shell from saving these
#       commands into history.
bind C-c send-keys " for pane in \$(tmux list-panes -F '#P'); do tmux send-keys -t \$pane ' clear' Enter; done" Enter

# Create a new window starting in the current working directory rather than in
# the default directory.
bind C new-window -c "#{pane_current_path}"

# Make the prefix and 0 go to window number 10 (I use window numbering starting
# from 1).
bind 0 select-window -t :10

# Do not display the original window's name when renaming it. This makes
# renaming faster since one does not need to first erase the original name.
bind , command-prompt -p "(rename-window '#W')" "rename-window '%%'"

# Do the same for sessions.
bind '$' command-prompt -p "(rename-session '#S')" "rename-session '%%'"

# Configuration file reload.
bind R source-file ~/.tmux.conf \; display "Configuration reloaded."

# Toggle pane synchronization.
bind S set synchronize-panes

# Make b start copy mode.
bind b copy-mode

# Make Ctrl+b start copy mode and scroll one page up (just like PgUp does).
bind C-b copy-mode -u

# Make copy mode behave more like Vim.
# Moreover, make 'y' copy also to the system clipboard.
# if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) < 2.4" | bc) -eq 1 ]' \
#     "bind -t vi-copy v begin-selection" \
#     "bind -T copy-mode-vi v send -X begin-selection"
# if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) < 2.4" | bc) -eq 1 ]' \
#     "bind -t vi-copy C-v rectangle-toggle" \
#     "bind -T copy-mode-vi C-v send -X rectangle-toggle"
# if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) < 2.4" | bc) -eq 1 ]' \
#     "bind -t vi-copy y copy-pipe 'xclip -filter -selection clipboard | xclip -selection primary'" \
#     "bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -filter -selection clipboard | xclip -selection primary'"

# if-shell -b 'test -n "$WSLENV"' 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel clip.exe'
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi Escape send-keys -X cancel
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "/mnt/c/Windows/System32/clip.exe"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "/mnt/c/Windows/System32/clip.exe"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "/mnt/c/Windows/System32/clip.exe"

# ------------------------------------------------------------------------------
# Styling.
# ------------------------------------------------------------------------------

# set -g @themepack 'powerline/block/gray'

# set -g @themepack 'tmuxline/lightline'
set -g @themepack 'basic'

# set -g @theme-clock-mode-colour '#be7572'
# set -g @theme-mode-bg '#be7572'
# set -g @theme-pane-active-border-fg '#98bc99'
# set -g @theme-status-fg '#98bcbd'
# set -g @theme-status-left-fg '#98bc99'
# set -g @theme-status-right-fg '#98bcbd'
# set -g @theme-window-status-activity-fg '#e19972'
# set -g @theme-window-status-current-bg '#be7572'
# set -gF @theme-status-right "#{@themepack-status-right-area-left-format} #[fg=white]Â« #[fg=yellow]#{@themepack-status-right-area-middle-format} #[fg=#98bc99]#{@themepack-status-right-area-right-format}"

# source-file ~/.tmux/plugins/tmux-themepack/basic.tmuxtheme

#------------------------------------------------------------------------------
# Plugins.
#------------------------------------------------------------------------------

# tpm (and reqs)
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
